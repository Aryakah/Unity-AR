/training/performance/animation-frames.png" srcset=
  "../../images/training/performance/animation-frames.png 1x, ../../images/training/performance/animation-frames_2x.png 2x"
  width="803" alt="">
  <figcaption>
    <strong>Figure 1.</strong> Frame by frame animations stored as resources.
  </figcaption>
</figure>

<h3 id="use-drawables">
  Use Drawable Objects
</h3>

<p>
  Some images don't require a static image resource; the framework can
  dynamically draw the image at runtime instead. <code><a href="../../reference/android/graphics/drawable/Drawable.html">Drawable</a></code> objects (<code>&lt;shape&gt;</code> in
  XML) can take up a tiny amount of space in your APK. In addition, XML <code><a href="../../reference/android/graphics/drawable/Drawable.html">Drawable</a></code> objects produce monochromatic images
  compliant with material design guidelines.
</p>

<h3 id="reuse-resources">
  Reuse Resources
</h3>

<p>
  You can include a separate resource for variations of an image, such as
  tinted, shaded, or rotated versions of the same image. We recommend, however,
  that you reuse the same set of resources, customizing them as needed at
  runtime.
</p>

<p>
  Android provides several utilities to change the color of an asset, either
  using the <code>android:tint</code> and <code>tintMode</code> attributes on Android 5.0
  (API level 21) and higher. For lower versions of the platform, use the <code><a href="../../reference/android/graphics/ColorFilter.html">ColorFilter</a></code> class.
</p>
<p>
  You can also omit resources that are only a rotated equivalent of another
  resource. The following code snippet provides an example of turning an
  "expand" arrow into a "collapse" arrow icon by simply rotating the original
  image 180 degrees:
</p>

<pre class="prettyprint">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;rotate xmlns:android="http://schemas.android.com/apk/res/android"
    android:drawable="@drawable/ic_arrow_expand"
    android:fromDegrees="180"
    android:pivotX="50%"
    android:pivotY="50%"
    android:toDegrees="180" /&gt;
</pre>
<h3 id="render-code">
  Render From Code
</h3>

<p>
  You can also reduce your APK size by procedurally rendering your images.
  Procedural rendering frees up space because you no longer store an image file
  in your APK.
</p>

<h3 id="crunch">
  Crunch PNG Files
</h3>

<p>
  The <code>aapt</code> tool can optimize the image resources placed in
  <code>res/drawable/</code> with lossless compression during the build
  process. For example, the <code>aapt</code> tool can convert a true-color PNG
  that does not require more than 256 colors to an 8-bit PNG with a color
  palette. Doing so results in an image of equal quality but a smaller memory
  footprint.
</p>

<p>
  Keep in mind that the <code>aapt</code> has the following limitations:
</p>

<ul>
  <li>The <code>aapt</code> tool does not shrink PNG files contained in the
  <code>asset/</code> folder.
  </li>

  <li>Image files need to use 256 or fewer colors for the <code>aapt</code>
  tool to optimize them.
  </li>

  <li>The <code>aapt</code> tool may inflate PNG files that have already been
  compressed. To prevent this, you can use the <code>cruncherEnabled</code>
  flag in Gradle to disable this process for PNG files:
  </li>
</ul>

<pre class="prettyprint">
aaptOptions {
    cruncherEnabled = false
}
</pre>
<h3 id="compress">
  Compress PNG and JPEG Files
</h3>

<p>
  You can reduce PNG file sizes without losing image quality using tools like
  <a class="external-link" href=
  "http://pmt.sourceforge.net/pngcrush/">pngcrush</a>, <a class="external-link"
  href="https://pngquant.org/">pngquant</a>, or <a class="external-link" href=
  "https://github.com/google/zopfli">zopflipng</a>. All of these tools can
  reduce PNG file size while preserving image quality.
</p>

<p>
  The <code>pngcrush</code> tool is particularly effective: This tool iterates over
  PNG filters and zlib (Deflate) parameters, using each combination of filters
  and parameters to compress the image. It then chooses the configuration that
  yields the smallest compressed output.
</p>

<p>
  For JPEG 